doctype: template
impl: c2core.logical.platform.Template
# editable platform contents
contents:
  name: Rails/PostgreSQL Development
  description: |
               Creates a Ubuntu server, installs Python, the Ruby on Rails web framework, as well as PostgreSQL.
               C2 then clones a Git repository containing a Rails application, configures it to talk to the database,
               and uses the Linux "upstart" daemon to launch the Rails server.
               To customize first boot behavior, modify <repo_root>/c2/scripts/build.
               To customize upgrade behavior, modify <repo_root>/c2/scripts/upgrade.
  documentation: https://desk.opdemand.com/entries/20674758-rails-postgresql-development-platform
  package: c2.ubuntu.rails.dev
  categories: [ web, ruby, rails ]
  url: https://github.com/opdemand/c2-rails-helloworld/blob/master/c2/template.yaml
# form fields
forms:
  # platform config form
  config:
    sections:
      - name: Cloud
        fields:
          cloud_name:
            title: Region
            description: Name of AWS region
            type: clouds
          cloud_zone:
            title: Zone
            description: Name of specific AWS zone to use
            type: zone
          instance_type:
            title: Instance Type
            description: EC2 Instance Type
            type: text
      - name: SSH
        fields:
          ssh_public_key:
            title: SSH Public Key
            description: SSH public key for server authentication
            type: textarea
      - name: Repository
        fields:
          app_repository_url:
            title: Repository URL
            description: Git repository containing application code
            type: github
          repository_private_key:
            title: Repository Key
            description: SSH private key for private repository access (optional)
            type: textarea
      - name: Networking
        fields:
          access_network:
            title: Access Network
            description: Network mask for public users
            type: text
          admin_network:
            title: Admin Network
            description: Network mask for admin users
            type: text
          access_port:
            title: Access Port
            description: TCP port for public access
            type: text
      - name: Database
        fields:
          database_password:
            title: Database Password
            description: PostgreSQL database password
            type: password
      - name: Advanced
        fields:
          additional_packages:
            title: Additional Packages
            description: Additional packages to install on boot (space-separated)
            type: text
          user_build_script:
            title: Build Script URL
            description: URL for user-defined script to run on first build
            type: github
          user_upgrade_script:
            title: Upgrade Script URL
            description: URL for user-defined upgrade script
            type: github
  # platform publish form
  publish:
    ssh_url:
      title: SSH URL
      description: URL for accessing the server over SSH
      type: link
    access_url:
      title: Access URL
      description: URL for accessing the web application
      type: link
# platform configuration
config:
  doctype: config
  impl: c2core.resolve.Config
  contents:
    instance_type: c1.medium
    access_network: 0.0.0.0/0
    access_port: 3000
    admin_network: 0.0.0.0/0
    cloud_name: us-east-1
    cloud_zone:
    hostname: rails
    image_id:
    ssh_public_key:
    additional_packages: fail2ban
    database_password: frek2Thast
    app_repository_url: https://github.com/opdemand/c2-rails-helloworld.git
    repository_private_key:
    user_build_script: file:///home/ubuntu/repo/c2/scripts/build
    user_upgrade_script: file:///home/ubuntu/repo/c2/scripts/upgrade
# ordered platform tiers
tiers:
  # next tier
  - doctype: tier
    impl: c2core.logical.tier.Tier
    contents:
      name: Security Tier
    components:
      # keypair
      keypair:
        doctype: keypair
        impl: c2aws.ec2.KeyPair
        output:
          keypair: name
          key_material: material
        contents:
          name_prefix: rails
  # next tier
  - doctype: tier
    impl: c2core.logical.tier.Tier
    contents:
      name: Network Tier
    components:
      # security group
      sg:
        doctype: firewall
        impl: c2aws.ec2.SecurityGroup
        output:
          sg: name
        contents:
          name_prefix: rails
          description: Rails Ingess
        components:
          rules:
            - doctype: firewall_rule
              impl: c2aws.ec2.SecurityGroupRule
              input:
                cidr_ip: admin_network
              contents:
                ip_protocol: tcp
            - doctype: firewall_rule
              impl: c2aws.ec2.SecurityGroupRule
              input:
                cidr_ip: access_network
                from_port: access_port
                to_port: access_port
  # next tier
  - doctype: tier
    impl: c2core.logical.tier.Tier
    contents:
      name: Server Tier
    components:
      server:
        doctype: server
        impl: c2aws.ec2.Instance
        input:
          image_id: image_id
          instance_type: instance_type
          keypair: keypair
          security_groups: [ sg ]
          upgrade_script: user_upgrade_script
          zone: cloud_zone
        output:
          private_dns_name: private_dns_name
          public_dns_name: public_dns_name
        publish:
          ssh_url: ssh://ubuntu@%(public_dns_name)s/
          access_url: http://%(public_dns_name)s:3000/
        monitor:
          policy:
            attempts: 300
            port: 3000
        contents:
          name: rails
          security_groups: []
          user_data: |
            #cloud-config

            apt_update: true
            apt_upgrade: true
            byobu_by_default: system

            manage_etc_hosts: True
            hostname: %(hostname)s

            ssh_authorized_keys:
              - %(ssh_public_key)s

            # NOTE: called on first boot only
            runcmd:
             # create c2 working/log directories
             - mkdir -p /var/cache/c2
             - mkdir -p /var/log/c2
             # write out private key if exists
             - |
               cat > /var/cache/c2/write-private-key <<EOF
               #!/bin/sh
               mkdir -p /home/ubuntu/.ssh
               chmod 700 /home/ubuntu/.ssh
               cd /home/ubuntu/.ssh
               python -c 'import sys
               key="""%(repository_private_key)s"""
               if key == "None": sys.exit(0)
               with open("id_rsa", "w") as f: f.write(key+"\n")'
               chmod 600 /home/ubuntu/.ssh/id_rsa
               EOF
             - chmod +x /var/cache/c2/write-private-key
             - sudo -u ubuntu -i /var/cache/c2/write-private-key 2>&1 | tee -a /var/log/c2/build.log
             - rm /var/cache/c2/write-private-key
             # write out known hosts for github
             - |
               cat > /home/ubuntu/.ssh/known_hosts <<EOF
               |1|gWjGztJGJJqofFJr+IbLqRXQv2M=|NjW0/CNJgYo58K1JXBZl/md55FI= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
               |1|c7geHuPbgSFjBFvrLiDzj1Vk+ck=|fCcYgpcB7KHCEEC1putjjpL+ktw= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
               EOF
             - chown -R ubuntu.ubuntu /home/ubuntu/.ssh
             - chmod 600 /home/ubuntu/.ssh/known_hosts
             # install base packages
             - apt-get install -yq --force-yes git-core 2>&1 | tee -a /var/log/c2/build.log
             # clone repository
             - |
               cat > /var/cache/c2/clone-repo <<EOF
               #!/bin/sh -x
               git clone --recursive %(app_repository_url)s repo
               cd repo
               git submodule foreach git checkout master
               EOF
             - chmod +x /var/cache/c2/clone-repo
             - sudo -u ubuntu -i /var/cache/c2/clone-repo 2>&1 | tee -a /var/log/c2/build.log
             # write out json context
             - |
               cat > /var/cache/c2/build-inputs.json <<EOF
               %(json_context)s
               EOF
             # download build script template
             - curl %(user_build_script)s > /var/cache/c2/build.template
             # substitute inputs into build script
             - |
                python -c 'import json
                with open("/var/cache/c2/build-inputs.json") as f:
                  data = f.read()
                  inputs = json.loads(data)
                with open("/var/cache/c2/build.template") as f:
                  template = f.read()
                  script = template %% inputs
                with open("/var/cache/c2/build", "w") as f:
                  f.write(script)
                ' 2>&1 | tee -a /var/log/c2/build.log
             # call build script as root
             - chmod +x /var/cache/c2/build
             - /var/cache/c2/build 2>&1 | tee -a /var/log/c2/build.log
